"// 尋找所有 java 檔案並掃描 -----------------------------------------------------------------\r\npublic static void GoInFolder(File input_file) {\r\n    File[] fs = input_file.listFiles();\r\n    for (File f : fs) {\r\n        // 從最外層開始逐個資料探討\r\n        if (f.isDirectory()) {\r\n            // 資料夾 -> 進入找檔案 (遞迴遍歷所有檔案)\r\n            GoInFolder(f);\r\n        }\r\n        if (f.isFile() && f.getName().contains(\".java\")) {\r\n            // 檔案 -> 進入掃描 (找 java 檔)\r\n            // 檔案位置路徑的 \"\\\" 改為 \"/\"\r\n            String file_data_str = f.toString().replace(\"\\\\\", \"/\");\r\n            // 獲取放入 SourceRoot 的該檔案資料夾路徑 (src/main/data...)\r\n            String path = (file_data_str.substring(0, file_data_str.lastIndexOf(\"/\")));\r\n            // 獲取檔案名稱 (xxx.java)\r\n            filename = file_data_str.substring(file_data_str.lastIndexOf(\"/\") + 1);\r\n            SourceRoot sourceRoot = new SourceRoot(CodeGenerationUtils.mavenModuleRoot(DemoApplication.class).resolve(path));\r\n            // 將整個文件生成為 AST Node\r\n            CompilationUnit cu = sourceRoot.parse(\"\", filename);\r\n            // 紀錄進入點的prefix，每個 java 檔就刷新\r\n            endPointPrefix = \"\";\r\n            // 型態初始化\r\n            classHaveMethod_hashmap.put(filename.substring(0, filename.length() - 5), new ArrayList<>());\r\n            // 訪問者模式進入尋找 MethodDeclaration、AnnotationExpr、MethodCallExpr三種資料， 調用 accept 這個方法可以遍歷 AST 的所有子節點\r\n            cu.accept(new Method_Visitor(), null);\r\n        }\r\n    }\r\n}"