"public static String Data_Printer(String writePath) throws JsonProcessingException {\r\n    //        System.out.println(\"\\n----------------------Start: Print Hashmap for Class 下宣告過的 Method-------------------------------------\");\r\n    //        for (Object key: classHaveMethod_hashmap.keySet()){\r\n    //            System.out.println(key+ \" = \" + classHaveMethod_hashmap.get(key));\r\n    //        }\r\n    //        return_data.put(\"classHaveMethod\",classHaveMethod_hashmap);\r\n    //        System.out.println(\"---------------------End:  Print Hashmap for Class 下宣告過的 Method-------------------------------------\\n\");\r\n    //\r\n    //        System.out.println(\"----------------------Start: Print methodCall_Node for all method-------------------------------------\");\r\n    //        return_data.put(\"methodCallNode\",methodCall_Node);\r\n    //        for (MethodCallOtherMethods_Node node : methodCall_Node) {\r\n    //\r\n    //            System.out.printf(\"%s (%s)\\t\", node.getMethodName(),node.getMethod_className() );\r\n    //\r\n    //            // 印class:method\r\n    //            System.out.print(node.getCallMethods_str());\r\n    //\r\n    //            System.out.printf(\"\\t%s\\n\",node.getChild_methods());\r\n    //        }\r\n    //        System.out.println(\"---------------------End: Print methodCall_Node for all method-------------------------------------\\n\");\r\n    //\r\n    //\r\n    //        System.out.println(\"----------------------Start: Print annotation 對應的 class、method-------------------------------------\");\r\n    //        return_data.put(\"annotationNode\",annotation_Node);\r\n    //        for (AnnotationCorrespondingMethod_Node node : annotation_Node) {\r\n    //            System.out.println(node.getClassName() + \"\\t\" + node.getMethodName() + \"\\t\" + node.getAnnotations() + \"\\t\" + node.getEndpoint());\r\n    //        }\r\n    //        System.out.println(\"---------------------End: Print annotation 對應的 class、method-------------------------------------\\n\");\r\n    //\r\n    //        System.out.println(\"-------------Start: Print 有被呼叫過的所有 method (被呼叫的 method 之 class : 被呼叫的 method )------------------\");\r\n    //        System.out.println(\"有被呼叫過的所有 method (class: method) \");\r\n    //        return_data.put(\"usedMethod\",use_methods);\r\n    //        for (String use_method : use_methods) {\r\n    //            System.out.println(use_method);\r\n    //        }\r\n    //        System.out.println(\"-------------End: Print 有被呼叫過的所有 method (被呼叫的 method 之 class : 被呼叫的 method )------------------\\n\");\r\n    System.out.println(\"---------------------Start: Print AST-------------------------------------\");\r\n    annotationAST test = new annotationAST();\r\n    test.find_annotation_AST();\r\n    System.out.println(\"---------------------End: Print AST-------------------------------------\\n\");\r\n    for (AnnotationCorrespondingMethod_Node in_out : ASTBuild) {\r\n        System.out.println(in_out.getAnnotations() + \", \\t\" + in_out.getMethodName() + \", \\t\" + in_out.getClassName());\r\n        annotationAST print_ast_inside = new annotationAST();\r\n        print_ast_inside.find_ast(in_out);\r\n    }\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    String json = objectMapper.writeValueAsString(ASTBuild);\r\n    //        System.out.println(json);\r\n    //test\r\n    //        FileWriter fw = null;\r\n    //        try {\r\n    //            fw = new FileWriter(writePath + \"\\\\AST_output.json\");\r\n    //\r\n    //            BufferedWriter bw = new BufferedWriter(fw);\r\n    //\r\n    //            bw.write(json);    // 寫入資料\r\n    //\r\n    //            bw.flush(); // 把記憶體資料寫進去\r\n    //        } catch (IOException e) {\r\n    //            e.printStackTrace();\r\n    //        }\r\n    return json;\r\n}"